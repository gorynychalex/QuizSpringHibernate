<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:context="http://www.springframework.org/schema/context"
             xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
             xsi:schemaLocation="http://www.springframework.org/schema/security
             http://www.springframework.org/schema/security/spring-security.xsd
             http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd
             http://www.springframework.org/schema/context
             http://www.springframework.org/schema/context/spring-context.xsd"
>

    <!--<context:component-scan base-package="ru.dvfu.mrcpk.develop.server"/>-->

    <!--http://javainsimpleway.com/spring-rest-service-security-with-oauth-xml/-->

    <!-- This is default url provided by spring to get the tokens(access and refresh) from OAuth -->
    <http pattern="/oauth/token"
          create-session="stateless"
          authentication-manager-ref="clientAuthenticationManager">
        <intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
        <anonymous enabled="false" />
        <http-basic entry-point-ref="clientAuthenticationEntryPoint" />

        <custom-filter ref="clientCredentialsTokenEndpointFilter"
                       after="BASIC_AUTH_FILTER" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />

    </http>

    <!-- This is where we tells spring security what URL should be protected
  and what roles have access to them -->

    <http pattern="/rest/**" create-session="never"
          entry-point-ref="oauthAuthenticationEntryPoint"
          access-decision-manager-ref="accessDecisionManager">
        <anonymous enabled="false" />
        <intercept-url pattern="/rest/api/**" access="ROLE_OAUTH_CLIENT" />
        <custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
    </http>

    <beans:bean id="oauthAuthenticationEntryPoint"
                class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <beans:property name="realmName" value="sample" />
    </beans:bean>

    <beans:bean id="clientAuthenticationEntryPoint"
                class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <beans:property name="realmName" value="sample/oauthClient" />
        <beans:property name="typeName" value="Basic" />
    </beans:bean>

    <beans:bean id="oauthAccessDeniedHandler"
                class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />

    <beans:bean id="clientCredentialsTokenEndpointFilter"
                class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
        <beans:property name="authenticationManager" ref="clientAuthenticationManager" />
    </beans:bean>

    <bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased"
          xmlns="http://www.springframework.org/schema/beans">
        <constructor-arg>
            <list>
                <bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
                <bean class="org.springframework.security.access.vote.RoleVoter" />
                <bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
            </list>
        </constructor-arg>
    </bean>

    <authentication-manager id="clientAuthenticationManager"
                            xmlns="http://www.springframework.org/schema/security">
        <authentication-provider user-service-ref="clientDetailsUserService" />
    </authentication-manager>

    <!-- Here we have hard-coded user name and password details. We can replace this with a user defined service to get users
     credentials from DB -->
    <authentication-manager alias="authenticationManager"
                            xmlns="http://www.springframework.org/schema/security">
        <authentication-provider>
            <user-service id="userDetailsService">
                <user name="kb" password="kb@1234" authorities="ROLE_OAUTH_CLIENT" />
                <user name="raj" password="raj@1234" authorities="ROLE_OAUTH_CLIENT" />
            </user-service>
        </authentication-provider>
    </authentication-manager>

    <beans:bean id="clientDetailsUserService"
                class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
        <beans:constructor-arg ref="clientDetails" />
    </beans:bean>

    <!--We have used JDBC tokenstore to store the tokens or Hybernate!!!,
        but we can use In Memory token store for development purpose -->
    <beans:bean id="tokenStore"
                class="org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore">
    </beans:bean>

    <!-- tokenServices bean for defining token based configurations, token validity etc -->
    <beans:bean id="tokenServices"
                class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
        <beans:property name="tokenStore" ref="tokenStore" />
        <beans:property name="supportRefreshToken" value="true" />
        <beans:property name="accessTokenValiditySeconds" value="120" />
        <beans:property name="clientDetailsService" ref="clientDetails" />
    </beans:bean>

    <beans:bean id="requestFactory"
                class="org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory">
        <beans:constructor-arg name="clientDetailsService" ref="clientDetails" />
    </beans:bean>

    <beans:bean id="userApprovalHandler" class="org.springframework.security.oauth2.provider.approval.TokenStoreUserApprovalHandler">
        <beans:property name="tokenStore" ref="tokenStore"/>
        <beans:property name="requestFactory" ref="requestFactory" />
    </beans:bean>

    <oauth:authorization-server
            client-details-service-ref="clientDetails" token-services-ref="tokenServices"
            user-approval-handler-ref="userApprovalHandler">
        <oauth:authorization-code />
        <oauth:implicit />
        <oauth:refresh-token />
        <oauth:client-credentials />
        <oauth:password />
    </oauth:authorization-server>

    <oauth:resource-server id="resourceServerFilter"
                           resource-id="sample" token-services-ref="tokenServices" />

    <oauth:client-details-service id="clientDetails">
        <!-- client -->
        <oauth:client client-id="trusted client"
                      authorized-grant-types="password,refresh_token,client_credentials"
                      authorities="ROLE_OAUTH_CLIENT" scope="read,write,trust" secret="secret" />

        <oauth:client client-id="trusted client with secret"
                      authorized-grant-types="password,authorization_code,refresh_token,implicit"
                      secret="somesecret" authorities="ROLE_OAUTH_CLIENT" />

    </oauth:client-details-service>

    <oauth:expression-handler id="oauthExpressionHandler" />
    <oauth:web-expression-handler id="oauthWebExpressionHandler" />

    <global-method-security pre-post-annotations="enabled" proxy-target-class="true">
        <expression-handler ref="oauthExpressionHandler"/>
    </global-method-security>


    <!--SIMPLE AUTHENTICATION-->
    <!--<http/>-->
    <http auto-config="true" use-expressions="false">

        <intercept-url pattern="/res" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <intercept-url pattern="/user/**" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <intercept-url pattern="/quiz/**" access="ROLE_ADMIN,ROLE_USER"/>
        <intercept-url pattern="/rest/**" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <intercept-url pattern="/start" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <intercept-url pattern="/startauth" access="ROLE_USER,ROLE_ADMIN"/>
        <intercept-url pattern="/templates/**" access="ROLE_USER,ROLE_ADMIN"/>
        <intercept-url pattern="/startvue" access="ROLE_USER,ROLE_ADMIN"/>

        <csrf />

        <form-login login-page="/login.jsp"
                    default-target-url="/"
                    username-parameter="username"
                    password-parameter="password"
                    authentication-failure-url="/login.jsp?error=true"/>

        <!--https://www.mkyong.com/spring-security/spring-security-hibernate-xml-example/-->
        <logout logout-url="login.jsp?logout" logout-success-url="/startauth" delete-cookies="JSESSIONID"/>

        <remember-me user-service-ref="userAuthDetailsService"/>

    </http>

    <!--https://www.concretepage.com/spring-4/spring-4-rest-security-hibernate-5-crud-example-using-annotation-and-xml-->
    <!--<beans:bean name="userAuthDetailsService" class="ru.dvfu.mrcpk.develop.server.service.UserAuthDetailsService">-->

    <!--</beans:bean>-->


    <!--https://www.mkyong.com/spring-security/spring-security-hibernate-xml-example/-->
    <authentication-manager>
        <!--<authentication-provider>-->
        <authentication-provider user-service-ref="userAuthDetailsService">
            <!--<password-encoder hash="plaintext"/>-->
            <!---->
            <!--<user-service>-->
            <!--<user name="admin" password="1" authorities="ROLE_ADMIN"/>-->
            <!--<user name="user" password="1" authorities="ROLE_USER"/>-->
            <!--</user-service>-->
        </authentication-provider>
    </authentication-manager>


</beans:beans>